Git status 				-	Current status

Git config user.name = "xxx"		- 	Set name

Git config user.password = "xxx"	- 	Set password

Git config user.email <EMAIL>		- 	Set email

Git config --global alias.<ALIAS> <CODE>	- Tie <CODE> to the shortcut command <ALIAS>.
	
Git clone <REPOSITORY PATH> 		- 	Clone the repository in the local directory, as origin. (init + remote add origin + pull)

Git add <FILENAME>			-	Add file to be committed		(Select products to post)		STAGING

Git commit -m "MESSAGE"			-	Commit all files to be added		(Put products in box and tape it up)	COMMITTING

Git push origin master			- 	Upload the changes			(Post the box)				PUSHING

Git rm <FILENAME>			- 	Delete the file and remove from tracking

Git restore --cached <FILENAME>		-	Remove file from staging				 

Git reset				- 	Remove all tracked files from staging

Git reset --hard			- 	As above, and revert file contents to that of previous commit. Good for fixing uncommited errors.

Git reset --mixed HEAD~1		- 	Moves head back to previous commit without altering files (redo commit, do git 'rebase -i > edit' first)

Git clean -f				-       Delete / remove all untracked files

Git log					-	View previous commits

Git log -n 10				- 	Only show last 10 log entries

Git log HEAD..<BRANCHNAME> --stat	- 	Show commits in <BRANCHNAME> not seen by head, with details.git  Useful when head = Master, to see what will be merged.

Git reflog				-	Show log of all actions

Git tag -a <TAG> -m <MESSAGE>     	- 	Add a tag that can be used instead of a hash.

Git init            			- Initialise local repository

Git remote add origin <URL> 		- Connect local repository to a repository named origin at <URL>

Git diff <FILENAME> 			-	Shows changes made to the file.

Git checkout <COMMIT HASH>		-	Take project back to state at that Commit's hash. (Takes you off the branch).

Git revert <COMMIT HASH>		- 	Revert changes made in that commit, but leave it in the history.

Git checkout <FILENAME>			-	Remove uncommitted changes to the file.

Git branch				- 	Display all branches

Git branch -r				- 	Display remote branches (Use fetch to add branches)

Git branch <BRANCHNAME>			- 	Create a new branch called <BRANCHNAME>

Git branch -d <BRANCHNAME>		- 	Delete a branch (ie after it has merged into Master)

Git checkout <BRANCHNAME>		- 	Move to that branch <BRANCHNAME>

Git merge <BRANCHNAME> 			- 	Merge <BRANCHNAME> into current branch (ie Master)

Git rebase master			-	Bring branch up to date with master (like git pull)

Git fetch				-	Update info for repo, use checkout to check if local repo is behind or ahead of remote repo.

Git pull				-	Update local repo to latest remote repo.

Git format-patch <BRANCHNAME>		- 	Create a patch for each commit made in current branch but not in <BRANCHNAME> ie master.

Git am < <PATCHFILE>			-	Incorporate a received patchfile as a commit.

Git lfs track "*.bc"  			- Track files of type .bc into Large File Storage

Git lfs migrate info  			- Show file types in repo taking up large amounts of space

Git lfs migrate import --include="*.bc" - Convert all files of type .bc into LFS system

CTRL+L					-	Clear the console.

CTRL+D					- 	Close the window.

SPACE / Q				- 	Scroll through pages, quit scrolling

Git archive <BRANCHNAME> --format=zip --output=<PATH>	- Archive the branch contents as a snapshot, without .git tracking.

Git bundle create <PATH> <BRANCHNAME>	- Create a copy of the whole repo with Git tracking - can be activated with Git Clone.

Git stash				- Park uncommitted changes (like 'save to drafts').

Git stash apply				- Bring back stashed changes, ready to commit.

Git diff 				- difference between working directory and staging.

Git diff <STATE1>..<STATE2>		- More detailed than the Git log comparison.





